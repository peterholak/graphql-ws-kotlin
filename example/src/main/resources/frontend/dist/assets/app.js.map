{"version":3,"sources":["webpack:///assets/app.js","webpack:///./src/fetcher.ts","webpack:///./src/default-text.txt","webpack:///./src/index.tsx"],"names":["webpackJsonp","176","module","exports","__webpack_require__","Object","defineProperty","value","graphql_1","isSubscriptionOperation","graphQlParams","document","parse","query","_i","_a","definitions","length","definition","kind","operation","undefined","operationName","name","graphQLFetcher","subscriptionsClient","fallbackFetcher","subscribedCallback","graphQLParams","id_1","subscribe","variables","error","result","Promise","resolve","178","180","postFetcher","payload","fetch","host","method","headers","Content-Type","body","JSON","stringify","then","response","json","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","call","React","ReactDOM","GraphiQL","fetcher_1","subscriptions_transport_ws_1","defaultText","window","location","subscriptionClient","SubscriptionClient","reconnect","App","_super","_this","apply","state","events","status","fetcher","onSubscriptionData","bind","keyCounter","componentDidMount","onConnecting","setState","onConnected","onDisconnected","onReconnecting","onReconnected","render","createElement","style","width","height","display","flexGrow","overflow","headingStyle","hintStyle","marginBottom","publishButtonStyle","onClick","publishText","defaultValue","ref","e","publishTextElement","redButtonStyle","unsubscribeAll","clearLog","statusStyle","color","statusColor","background","map","key","reactKey","defaultQuery","id","concat","data","errors","Component","buttonStyle","padding","border","boxShadow","margin","fontFamily","fontSize","connected","connecting","reconnected","reconnecting","disconnected","getElementById"],"mappings":"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","file":"assets/app.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 176:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/* Based on from https://github.com/apollographql/GraphiQL-Subscriptions-Fetcher */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar graphql_1 = __webpack_require__(6);\r\nvar isSubscriptionOperation = function (graphQlParams) {\r\n    var document = graphql_1.parse(graphQlParams.query);\r\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\r\n        var definition = _a[_i];\r\n        if (definition.kind === 'OperationDefinition') {\r\n            var operation = definition.operation;\r\n            if (operation === 'subscription' &&\r\n                // If there is more than one operation, only consider it a subscription if that is the operation we're running.\r\n                (graphQlParams.operationName === undefined ||\r\n                    (definition.name && graphQlParams.operationName === definition.name.value))) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\nexports.graphQLFetcher = function (subscriptionsClient, fallbackFetcher, subscribedCallback) {\r\n    return function (graphQLParams) {\r\n        if (isSubscriptionOperation(graphQLParams)) {\r\n            var id_1 = subscriptionsClient.subscribe({\r\n                query: graphQLParams.query,\r\n                variables: graphQLParams.variables,\r\n                operationName: graphQLParams.operationName\r\n            }, function (error, result) {\r\n                if (error) {\r\n                    subscribedCallback(id_1, undefined, error);\r\n                }\r\n                else {\r\n                    subscribedCallback(id_1, result, undefined);\r\n                }\r\n            });\r\n            return Promise.resolve(\"Subscription id is \" + id_1 + \". Data received via subscriptions will appear in the area above\");\r\n        }\r\n        else {\r\n            return fallbackFetcher(graphQLParams);\r\n        }\r\n    };\r\n};\r\n\n\n/***/ }),\n\n/***/ 178:\n/***/ (function(module, exports) {\n\nmodule.exports = \"subscription {\\r\\n  # Try pressing Ctrl+Space inside this block.\\r\\n  # You can only subscribe to a single subscription in one go.\\r\\n}\\r\\n\\r\\n# There are some queries and mutations in the schema as well...\\r\\n\"\n\n/***/ }),\n\n/***/ 180:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(8);\r\nvar ReactDOM = __webpack_require__(92);\r\nvar GraphiQL = __webpack_require__(177);\r\nvar fetcher_1 = __webpack_require__(176);\r\nvar subscriptions_transport_ws_1 = __webpack_require__(179);\r\nvar defaultText = __webpack_require__(178);\r\n// Change this when running under webpack-dev-server\r\nvar host = window.location.host;\r\n// const host = 'localhost:4567'\r\nvar subscriptionClient = new subscriptions_transport_ws_1.SubscriptionClient('ws://' + host + \"/subscriptions\", { reconnect: true });\r\nfunction postFetcher(payload) {\r\n    return fetch('http://' + host + '/graphql', {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n    }).then(function (response) { return response.json(); });\r\n}\r\nvar App = (function (_super) {\r\n    __extends(App, _super);\r\n    function App() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = { events: [], status: 'disconnected' };\r\n        _this.fetcher = fetcher_1.graphQLFetcher(subscriptionClient, postFetcher, _this.onSubscriptionData.bind(_this));\r\n        _this.keyCounter = 0;\r\n        return _this;\r\n    }\r\n    App.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        subscriptionClient.onConnecting(function () { return _this.setState({ status: 'connecting' }); });\r\n        subscriptionClient.onConnected(function () { return _this.setState({ status: 'connected' }); });\r\n        subscriptionClient.onDisconnected(function () { return _this.setState({ status: 'disconnected' }); });\r\n        subscriptionClient.onReconnecting(function () { return _this.setState({ status: 'reconnecting' }); });\r\n        subscriptionClient.onReconnected(function () { return _this.setState({ status: 'reconnected' }); });\r\n    };\r\n    App.prototype.render = function () {\r\n        var _this = this;\r\n        return React.createElement(\"div\", { style: { width: '100%', height: '100%' } },\r\n            React.createElement(\"div\", { style: { height: '30%', display: 'flex' } },\r\n                React.createElement(\"div\", { style: { flexGrow: 0.25, overflow: 'auto' } },\r\n                    React.createElement(\"h1\", { style: headingStyle }, \"graphql-ws-kotlin example\"),\r\n                    React.createElement(\"div\", { style: hintStyle }, \"Try subscribing to `textPublished` in the graphiql editor below!\"),\r\n                    React.createElement(\"div\", { style: hintStyle }, \"Try opening this page in multiple tabs, or even on different devices!\"),\r\n                    React.createElement(\"div\", { style: { marginBottom: '10px' } },\r\n                        React.createElement(\"button\", { style: publishButtonStyle, onClick: this.publishText.bind(this) }, \"Publish text\"),\r\n                        React.createElement(\"input\", { defaultValue: \"10\", ref: function (e) { return _this.publishTextElement = e; } })),\r\n                    React.createElement(\"div\", null,\r\n                        React.createElement(\"button\", { style: redButtonStyle, onClick: this.unsubscribeAll.bind(this) }, \"Unsubscribe all\"),\r\n                        React.createElement(\"button\", { style: redButtonStyle, onClick: this.clearLog.bind(this) }, \"Clear log\")),\r\n                    React.createElement(\"div\", { style: __assign({}, statusStyle, { color: statusColor[this.state.status] }) },\r\n                        \"WebSocket status: \",\r\n                        this.state.status)),\r\n                React.createElement(\"div\", { style: { flexGrow: 0.75, height: '100%', overflow: 'auto', background: '#eee' } },\r\n                    React.createElement(\"h1\", { style: headingStyle }, \"Notification log\"),\r\n                    this.state.events.map(function (e) { return React.createElement(\"div\", { key: e.reactKey }, JSON.stringify(e.payload)); }))),\r\n            React.createElement(\"div\", { style: { height: '70%' } },\r\n                React.createElement(GraphiQL, { style: { flexGrow: 1 }, fetcher: this.fetcher, defaultQuery: defaultText })));\r\n    };\r\n    App.prototype.onSubscriptionData = function (id, result, error) {\r\n        this.keyCounter++;\r\n        if (result !== undefined) {\r\n            this.setState({ events: this.state.events.concat([{ payload: { id: id, data: result }, reactKey: this.keyCounter }]) });\r\n        }\r\n        else {\r\n            this.setState({ events: this.state.events.concat([{ payload: { id: id, errors: error }, reactKey: this.keyCounter }]) });\r\n        }\r\n    };\r\n    App.prototype.publishText = function () {\r\n        fetch(\"http://\" + host + \"/publish-text\", {\r\n            method: 'POST',\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ value: this.publishTextElement.value })\r\n        });\r\n    };\r\n    App.prototype.unsubscribeAll = function () {\r\n        subscriptionClient.unsubscribeAll();\r\n    };\r\n    App.prototype.clearLog = function () {\r\n        this.setState({ events: [] });\r\n    };\r\n    return App;\r\n}(React.Component));\r\nvar buttonStyle = {\r\n    padding: '5px 10px',\r\n    background: '#444',\r\n    color: '#fff',\r\n    border: '1px solid #ccc',\r\n    boxShadow: '4px 4px 4px #eee',\r\n    margin: '0 5px'\r\n};\r\nvar publishButtonStyle = __assign({}, buttonStyle, { background: '#00BCD4' });\r\nvar redButtonStyle = __assign({}, buttonStyle, { background: '#EF9A9A' });\r\nvar headingStyle = {\r\n    fontFamily: 'sans-serif',\r\n    margin: '5px',\r\n    fontSize: '100%'\r\n};\r\nvar statusStyle = {\r\n    margin: '10px 5px',\r\n    fontFamily: 'sans-serif'\r\n};\r\nvar statusColor = {\r\n    'connected': '#43A047',\r\n    'connecting': '#F9A825',\r\n    'reconnected': '#43A047',\r\n    'reconnecting': '#F9A825',\r\n    'disconnected': '#F44336'\r\n};\r\nvar hintStyle = {\r\n    fontFamily: 'sans-serif',\r\n    margin: '5px',\r\n    fontSize: '85%'\r\n};\r\nReactDOM.render(React.createElement(App, null), document.getElementById('app'));\r\n\n\n/***/ })\n\n},[180]);\n\n\n// WEBPACK FOOTER //\n// assets/app.js","/* Based on from https://github.com/apollographql/GraphiQL-Subscriptions-Fetcher */\r\n\r\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\r\nimport { parse } from 'graphql';\r\n\r\nconst isSubscriptionOperation = (graphQlParams: any) => {\r\n    const document = parse(graphQlParams.query);\r\n\r\n    for (const definition of document.definitions) {\r\n        if (definition.kind === 'OperationDefinition') {\r\n            const operation = definition.operation;\r\n            if (\r\n                operation === 'subscription' &&\r\n                // If there is more than one operation, only consider it a subscription if that is the operation we're running.\r\n                (\r\n                    graphQlParams.operationName === undefined ||\r\n                    (definition.name && graphQlParams.operationName === definition.name.value)\r\n                )\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n\r\nexport const graphQLFetcher = (subscriptionsClient: SubscriptionClient, fallbackFetcher: Function, subscribedCallback: (id, result, error) => any) => {\r\n    return (graphQLParams: any) => {\r\n        if (isSubscriptionOperation(graphQLParams)) {\r\n\r\n            const id = subscriptionsClient.subscribe({\r\n                query: graphQLParams.query,\r\n                variables: graphQLParams.variables,\r\n                operationName: graphQLParams.operationName\r\n            }, (error, result) => {\r\n                if (error) {\r\n                    subscribedCallback(id, undefined, error)\r\n                } else {\r\n                    subscribedCallback(id, result, undefined)\r\n                }\r\n            });\r\n            \r\n            return Promise.resolve(\"Subscription id is \" + id + \". Data received via subscriptions will appear in the area above\")\r\n        } else {\r\n            return fallbackFetcher(graphQLParams);\r\n        }\r\n    };\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/fetcher.ts","module.exports = \"subscription {\\r\\n  # Try pressing Ctrl+Space inside this block.\\r\\n  # You can only subscribe to a single subscription in one go.\\r\\n}\\r\\n\\r\\n# There are some queries and mutations in the schema as well...\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/default-text.txt\n// module id = 178\n// module chunks = 0","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport * as GraphiQL from 'graphiql'\r\nimport { graphQLFetcher } from './fetcher'\r\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\r\nimport * as defaultText from './default-text.txt'\r\n\r\n// Change this when running under webpack-dev-server\r\nconst host = window.location.host\r\n// const host = 'localhost:4567'\r\n\r\nconst subscriptionClient = new SubscriptionClient(\r\n    'ws://' + host + \"/subscriptions\",\r\n    { reconnect: true }\r\n)\r\n\r\nfunction postFetcher(payload: any) {\r\n    return fetch('http://' + host + '/graphql', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        }).then((response: Response) => response.json())\r\n}\r\n\r\ntype ConnectionStatus = 'connected'|'connecting'|'disconnected'|'reconnected'|'reconnecting'\r\ninterface SubscriptionData { payload: { id: string, data?: any, errors?: any }, reactKey: number }\r\ninterface State { events: SubscriptionData[], status: ConnectionStatus }\r\nclass App extends React.Component<{}, State> {\r\n    state: State = { events: [], status: 'disconnected' }\r\n    fetcher = graphQLFetcher(subscriptionClient, postFetcher, this.onSubscriptionData.bind(this))\r\n    publishTextElement: HTMLInputElement\r\n    keyCounter = 0\r\n\r\n    componentDidMount() {\r\n        subscriptionClient.onConnecting(() => this.setState({ status: 'connecting' }))\r\n        subscriptionClient.onConnected(() => this.setState({ status: 'connected'}))\r\n        subscriptionClient.onDisconnected(() => this.setState({ status: 'disconnected'}))\r\n        subscriptionClient.onReconnecting(() => this.setState({ status: 'reconnecting'}))\r\n        subscriptionClient.onReconnected(() => this.setState({ status: 'reconnected' }))\r\n    }\r\n\r\n    render() {\r\n        return <div style={{width: '100%', height: '100%'}}>\r\n            <div style={{height: '30%', display: 'flex'}}>\r\n                <div style={{flexGrow: 0.25, overflow: 'auto'}}>\r\n                    <h1 style={headingStyle}>graphql-ws-kotlin example</h1>\r\n                    <div style={hintStyle}>Try subscribing to `textPublished` in the graphiql editor below!</div>\r\n                    <div style={hintStyle}>Try opening this page in multiple tabs, or even on different devices!</div>\r\n                    <div style={{marginBottom: '10px'}}>\r\n                        <button style={publishButtonStyle} onClick={this.publishText.bind(this)}>Publish text</button>\r\n                        <input defaultValue={\"10\"} ref={e => this.publishTextElement = e} />\r\n                    </div>\r\n                    <div>\r\n                        <button style={redButtonStyle} onClick={this.unsubscribeAll.bind(this)}>Unsubscribe all</button>\r\n                        <button style={redButtonStyle} onClick={this.clearLog.bind(this)}>Clear log</button>\r\n                    </div>\r\n                    <div style={{...statusStyle, color: statusColor[this.state.status]}}>WebSocket status: {this.state.status}</div>\r\n                </div>\r\n                <div style={{flexGrow: 0.75, height: '100%', overflow: 'auto', background: '#eee'}}>\r\n                    <h1 style={headingStyle}>Notification log</h1>\r\n                    {this.state.events.map(e => <div key={e.reactKey}>{JSON.stringify(e.payload)}</div>)}\r\n                </div>\r\n            </div>\r\n            <div style={{height: '70%'}}>\r\n                <GraphiQL style={{flexGrow: 1}} fetcher={this.fetcher} defaultQuery={defaultText} />\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    onSubscriptionData(id, result, error) {\r\n        this.keyCounter++\r\n        if (result !== undefined) {\r\n            this.setState({ events: [ ...this.state.events, { payload: { id, data: result }, reactKey: this.keyCounter } ] })\r\n        }else{\r\n            this.setState({ events: [ ...this.state.events, { payload: { id, errors: error }, reactKey: this.keyCounter } ] })\r\n        }\r\n    }\r\n\r\n    publishText() {\r\n        fetch(\"http://\" + host + \"/publish-text\", {\r\n            method: 'POST',\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ value: this.publishTextElement.value })\r\n        })\r\n    }\r\n\r\n    unsubscribeAll() {\r\n        subscriptionClient.unsubscribeAll()\r\n    }\r\n\r\n    clearLog() {\r\n        this.setState({ events: [] })\r\n    }\r\n}\r\n\r\nconst buttonStyle = {\r\n    padding: '5px 10px',\r\n    background: '#444',\r\n    color: '#fff',\r\n    border: '1px solid #ccc',\r\n    boxShadow: '4px 4px 4px #eee',\r\n    margin: '0 5px'\r\n}\r\n\r\nconst publishButtonStyle = {\r\n    ...buttonStyle,\r\n    background: '#00BCD4'\r\n}\r\n\r\nconst redButtonStyle = {\r\n    ...buttonStyle,\r\n    background: '#EF9A9A'\r\n}\r\n\r\nconst headingStyle = {\r\n    fontFamily: 'sans-serif',\r\n    margin: '5px',\r\n    fontSize: '100%'\r\n}\r\n\r\nconst statusStyle = {\r\n    margin: '10px 5px',\r\n    fontFamily: 'sans-serif'\r\n}\r\n\r\nconst statusColor: {[key in ConnectionStatus]: string} = {\r\n    'connected': '#43A047',\r\n    'connecting': '#F9A825',\r\n    'reconnected': '#43A047',\r\n    'reconnecting': '#F9A825',\r\n    'disconnected': '#F44336'\r\n}\r\n\r\nconst hintStyle = {\r\n    fontFamily: 'sans-serif',\r\n    margin: '5px',\r\n    fontSize: '85%'\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('app')\r\n)\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}